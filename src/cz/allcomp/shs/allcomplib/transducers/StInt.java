/**
 * Copyright (c) 2015, Václav Vilímek
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 	- Redistributions of source code must retain the above copyright notice, this list 
 * 	  of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright , this list 
 *    of conditions and the following disclaimer in the documentation and/or other materials 
 *    provided with the distribution.
 *  - Neither the name of the ALLCOMP a.s. nor the of its contributors may be used to endorse 
 *    or promote products from this software without specific prior written permission.
 *    
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL VÁCLAV VILÍMEK BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package cz.allcomp.shs.allcomplib.transducers;


/**
* transducers/StInt.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /home/petr/secret/ewa/AllNet.idl
* Sunday, 15 February 2015 11:26:13 o'clock CET
*/


/** 
   * The <code>StInt</code> class implements the <code>StIntResult</code> interface
   * without a need to know all the elements.
   * <p> Only the sums and number of elements is need to provide results requested.
   */
public abstract class StInt implements StIntResult
{

 /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

/** Number of elements. */
  protected int count = (int)0;

 /** Sum of the elements. */
  protected int sum = (int)0;

 /** Sum of the element quadrates. */
  protected long sum2 = (long)0;

 /** Maximum value. */
  protected int max = (int)0;

 /** Minimum value. */
  protected int min = (int)0;

  private static String[] _truncatable_ids = {
    StIntHelper.id ()
  };

  public String[] _truncatable_ids() {
    return _truncatable_ids;
  }

  public void _read (org.omg.CORBA.portable.InputStream istream)
  {
    this.count = istream.read_long ();
    this.sum = istream.read_long ();
    this.sum2 = istream.read_longlong ();
    this.max = istream.read_long ();
    this.min = istream.read_long ();
  }

  public void _write (org.omg.CORBA.portable.OutputStream ostream)
  {
    ostream.write_long (this.count);
    ostream.write_long (this.sum);
    ostream.write_longlong (this.sum2);
    ostream.write_long (this.max);
    ostream.write_long (this.min);
  }

  public org.omg.CORBA.TypeCode _type ()
  {
    return StIntHelper.type ();
  }
} // class StInt
