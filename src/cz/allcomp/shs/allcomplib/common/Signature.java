/**
 * Copyright (c) 2015, Václav Vilímek
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 	- Redistributions of source code must retain the above copyright notice, this list 
 * 	  of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright , this list 
 *    of conditions and the following disclaimer in the documentation and/or other materials 
 *    provided with the distribution.
 *  - Neither the name of the ALLCOMP a.s. nor the of its contributors may be used to endorse 
 *    or promote products from this software without specific prior written permission.
 *    
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL VÁCLAV VILÍMEK BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package cz.allcomp.shs.allcomplib.common;


/**
* common/Signature.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /home/petr/secret/ewa/common.idl
* Tuesday, 3 February 2015 19:18:16 o'clock CET
*/


/** 
  * The <code>Signature</code> interface declares a getter method for some signature integer.
  * <p>This special integer constant has typically a meaning as an (enum) identifier.
  * <p>The XLATE_... constants defined here should be used in a method (possibly static)
  * converting a <code>Signature</code> integer to the string.
  * This string should be in some relation with a <code>Signature</code> constant name.
  *
  * <p>We can get a string hidden in a given <code>Signature</code> integer this way:
  * <p>A four byte integer is splitted in eight four bit nibbles.
  * Most frequently characters used in English are coded with just one nibble.
  * These characters are present in string XLATE_X at indexes 1..15.
  * Value 0 (binary 0000) is used as a prefix for other characters.
  * These characters are present in string XLATE_0X at indexes 1..15.
  * If two prefixed are used, the third nibble indicate which one
  * string from XLATE_000 to XLATE_00F this sequence stands for.
  * <p>If no bit is set in the rest of the integer
  * (from current position to the right), the conversion ends.
  * So the space char (code 0x000) can't be at the end of the string
  * and 0x0 returns an empty string.
  * <p>The string resulting may have eight characters in length maximum.
  */
public interface Signature extends org.omg.CORBA.portable.ValueBase
{

  /** Translate table for nibbles without a prefix. */
  public static final String XLATE_X = " ILTNSUWORAPCDEF";

  /** Translate table for nibbles with a single prefix. */
  public static final String XLATE_0X = " 12345670GYBKHMV";

  /** String used when a sequence 0x000 is found in the number */
  public static final String XLATE_000 = " ";

  /** String used when a sequence 0x001 is found in the number */
  public static final String XLATE_001 = "J";

  /** String used when a sequence 0x002 is found in the number */
  public static final String XLATE_002 = "Z";

  /** String used when a sequence 0x003 is found in the number (reserved) */
  public static final String XLATE_003 = "?";

  /** String used when a sequence 0x004 is found in the number */
  public static final String XLATE_004 = "ING";

  /** String used when a sequence 0x005 is found in the number */
  public static final String XLATE_005 = "$";

  /** String used when a sequence 0x006 is found in the number */
  public static final String XLATE_006 = "QU";

  /** String used when a sequence 0x007 is found in the number */
  public static final String XLATE_007 = "\u03BC";

  /** String used when a sequence 0x008 is found in the number */
  public static final String XLATE_008 = "8";

  /** String used when a sequence 0x009 is found in the number */
  public static final String XLATE_009 = "9";

  /** String used when a sequence 0x00A is found in the number */
  public static final String XLATE_00A = "X";

  /** String used when a sequence 0x00B is found in the number (reserved) */
  public static final String XLATE_00B = "%";

  /** String used when a sequence 0x00C is found in the number */
  public static final String XLATE_00C = "_";

  /** String used when a sequence 0x00D is found in the number (reserved) */
  public static final String XLATE_00D = "@";

  /** String used when a sequence 0x00E is found in the number (reserved) */
  public static final String XLATE_00E = "#";

  /** String used when a sequence 0x00F is found in the number (reserved) */
  public static final String XLATE_00F = "!";

  /**
      * Get a signature of some enum instance.
      * 
      * @return one from the integer constants defined as identifier
      */
  public abstract int getSignature ();


  /**
      * Get a name of some enum instance.
      * 
      * @return an enum name, possibly derived from its signature
      */
  public abstract String name ();

} // interface Signature
