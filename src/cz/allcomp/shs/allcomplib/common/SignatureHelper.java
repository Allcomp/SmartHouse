/**
 * Copyright (c) 2015, Václav Vilímek
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 	- Redistributions of source code must retain the above copyright notice, this list 
 * 	  of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright , this list 
 *    of conditions and the following disclaimer in the documentation and/or other materials 
 *    provided with the distribution.
 *  - Neither the name of the ALLCOMP a.s. nor the of its contributors may be used to endorse 
 *    or promote products from this software without specific prior written permission.
 *    
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL VÁCLAV VILÍMEK BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package cz.allcomp.shs.allcomplib.common;


/**
* common/SignatureHelper.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /home/petr/secret/ewa/idl
* Tuesday, 3 February 2015 19:18:16 o'clock CET
*/


/** 
  * The <code>Signature</code> interface declares a getter method for some signature integer.
  * <p>This special integer constant has typically a meaning as an (enum) identifier.
  * <p>The XLATE_... constants defined here should be used in a method (possibly static)
  * converting a <code>Signature</code> integer to the string.
  * This string should be in some relation with a <code>Signature</code> constant name.
  *
  * <p>We can get a string hidden in a given <code>Signature</code> integer this way:
  * <p>A four byte integer is splitted in eight four bit nibbles.
  * Most frequently characters used in English are coded with just one nibble.
  * These characters are present in string XLATE_X at indexes 1..15.
  * Value 0 (binary 0000) is used as a prefix for other characters.
  * These characters are present in string XLATE_0X at indexes 1..15.
  * If two prefixed are used, the third nibble indicate which one
  * string from XLATE_000 to XLATE_00F this sequence stands for.
  * <p>If no bit is set in the rest of the integer
  * (from current position to the right), the conversion ends.
  * So the space char (code 0x000) can't be at the end of the string
  * and 0x0 returns an empty string.
  * <p>The string resulting may have eight characters in length maximum.
  */
abstract public class SignatureHelper
{
  private static String  _id = "IDL:common/Signature:1.0";


  public static void insert (org.omg.CORBA.Any a, Signature that)
  {
    org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();
    a.type (type ());
    write (out, that);
    a.read_value (out.create_input_stream (), type ());
  }

  public static Signature extract (org.omg.CORBA.Any a)
  {
    return read (a.create_input_stream ());
  }

  private static org.omg.CORBA.TypeCode __typeCode = null;
  private static boolean __active = false;
  synchronized public static org.omg.CORBA.TypeCode type ()
  {
    if (__typeCode == null)
    {
      synchronized (org.omg.CORBA.TypeCode.class)
      {
        if (__typeCode == null)
        {
          if (__active)
          {
            return org.omg.CORBA.ORB.init().create_recursive_tc ( _id );
          }
          __active = true;
          org.omg.CORBA.ValueMember[] _members0 = new org.omg.CORBA.ValueMember[0];
          //org.omg.CORBA.TypeCode _tcOf_members0 = null;
          __typeCode = org.omg.CORBA.ORB.init ().create_value_tc (_id, "Signature", org.omg.CORBA.VM_ABSTRACT.value, null, _members0);
          __active = false;
        }
      }
    }
    return __typeCode;
  }

  public static String id ()
  {
    return _id;
  }

  public static Signature read (org.omg.CORBA.portable.InputStream istream)
  {
    return (Signature)((org.omg.CORBA_2_3.portable.InputStream) istream).read_value (id ());
  }

  public static void write (org.omg.CORBA.portable.OutputStream ostream, Signature value)
  {
    ((org.omg.CORBA_2_3.portable.OutputStream) ostream).write_value (value, id ());
  }


}
